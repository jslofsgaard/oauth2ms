#!/usr/bin/python3
# Copyright 2020 Harish Krupo
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from xdg.BaseDirectory import (
    load_first_config,
    save_data_path
)

import argparse
import webbrowser
import logging
import json
import msal

from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs, urlencode
from wsgiref import simple_server
import wsgiref.util
import sys
import uuid
import pprint
import os
import atexit
import base64
import gnupg
import ssl
import io

pp = pprint.PrettyPrinter(indent=4)

credentials_file = save_data_path("oauth2ms") + "/credentials.bin"

_LOGGER = logging.getLogger(__name__)

APP_NAME = "oauth2ms"
SUCCESS_MESSAGE = "Authorization complete."

parser = argparse.ArgumentParser()
parser.add_argument("--encode-xoauth2", action="store_true", default=False,
                    help="Print xoauth2 encoded token instead of the plain token")
parser.add_argument("-e", "--encrypt-using-fingerprint", action="store", default=None,
                    help="Use gpg encryption to encrypt/decrypt the token cache. Argument is the fingerprint/email to be used")
parser.add_argument("--gpg-home", action="store", default=None,
                    help="Set the gpg home directory")
parser.add_argument("--no-browser", action="store_true", default=False,
                    help="Don't open a browser with URL. Instead print the URL. Useful inside virtualized environments like WSL.")


def load_config():
    config_file = load_first_config(APP_NAME, "config.json")
    if config_file is None:
        print(f"Couldn't find configuration file. Config file must be at: $XDG_CONFIG_HOME/{APP_NAME}/config.json")
        print("Current value of $XDG_CONFIG_HOME is: {}".format(os.getenv("XDG_CONFIG_HOME")))
        return None

    return json.load(open(config_file, 'r'))

def build_msal_app(config, cache = None):
    tenant = config['tenant_id']
    secret = config['client_secret'] or None
    return msal.ConfidentialClientApplication(
        config['client_id'],
        authority=("https://login.microsoftonline.com/" + tenant + "/" if tenant else None),
        client_credential=secret,
        token_cache=cache
    )

def get_auth_url(config, cache, state):
    return build_msal_app(config, cache).get_authorization_request_url(
        config['scopes'],
        state=state,
        redirect_uri=config["redirect_uri"]
    )

def ssl_context(certf="cert.pem", keyf="key.pem"):
    context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
    context.load_cert_chain(certf, keyf)
    return context

class WSGIRequestHandler(wsgiref.simple_server.WSGIRequestHandler):
    """Silence out the messages from the http server"""
    def log_message(self, format, *args):
        pass

class WSGIRedirectionApp(object):
    """WSGI app to handle the authorization redirect.

    Stores the request URI and displays the given success message.
    """

    def __init__(self, message):
        self.last_request_uri = None
        self._success_message = message

    def __call__(self, environ, start_response):
        start_response("200 OK", [("Content-type", "text/plain; charset=utf-8")])
        self.last_request_uri = wsgiref.util.request_uri(environ)
        return [self._success_message.encode("utf-8")]

def validate_config(config):
    errs = {}

    # Make sure tenant_id is a string when present
    if "tenant_id" in config and not isinstance(config["tenant_id"], str):
        errs["tenant_id"] = "Must be a string when present in config"

    # Make sure client_id is present and is a string
    if "client_id" not in config:
        errs["client_id"] = "Mandatory string field"
    elif not isinstance(config["client_id"], str):
        errs["client_id"] = "Not a valid string"

    # Make sure client_secret is a string when present
    if "client_secret" in config and not isinstance(config["client_secret"], str):
        errs["client_secret"] = "Must be a string when present in config"

    # Make sure scopes is present and is a list of strings
    if "scopes" not in config:
        errs["scopes"] = "Missing required field"
    elif not isinstance(config["scopes"], list):
        errs["scopes"] = "Not a valid list"

    scopes_errs = {}
    for i, datum in enumerate(config["scopes"]):
        if not isinstance(datum, str):
            scopes_errs[i] = "Not a valid string"

    if scopes_errs:
        errs["scopes"] = scopes_errs

    # Make sure redirect is present
    if "redirect" not in config:
        errs["redirect"] = "Missing required redirect configuration object"
    else:
        redirect, redirect_errs = config["redirect"], {}

        # Make sure method is present and is one of 'http' or 'https'
        if "method" not in redirect:
            redirect_errs["method"] = "Missing required 'http' or 'https' field"
        elif redirect["method"] not in ("http", "https"):
            redirect_errs["method"] = "Must be one of: 'http', 'https'"

        # Make sure host is present and is a string
        if "host" not in redirect:
            redirect_errs["host"] = "Missing required field"
        elif not isinstance(redirect["host"], str):
            redirect_errs["host"] = "Not a valid string"

        # Make sure port is present and is an integer
        if "port" not in redirect:
            redirect_errs["port"] = "Missing required field"
        elif not isinstance(redirect["port"], int):
            redirect_errs["port"] = "Not a valid integer"

        # Make sure path is present and is a string
        if "path" not in redirect:
            redirect_errs["path"] = "Missing required field"
        elif not isinstance(redirect["path"], str):
            redirect_errs["path"] = "Not a valid string"

    if redirect_errs:
        errs["redirect"] = redirect_errs

    return errs or None

def build_new_app_state(crypt, no_browser = False):
    cache = msal.SerializableTokenCache()
    config = load_config()
    if config is None:
        return

    if errs := validate_config(config):
        print(f"Invalid config: {errs}")
        return

    state = str(uuid.uuid4())

    redirect_path = config["redirect"]["path"]
    # Remove / at the end if present, and path is not just /
    if redirect_path != "/" and redirect_path[-1] == "/":
        redirect_path = redirect_path[:-1]

    config["redirect_uri"] = (
        config["redirect"]["method"]
        + "://"
        + config["redirect"]["host"]
        + ":"
        + str(config["redirect"]["port"])
        + redirect_path
    )
    auth_url = get_auth_url(config, cache, state)
    wsgi_app = WSGIRedirectionApp(SUCCESS_MESSAGE)
    http_server = simple_server.make_server(
        config["redirect"]["host"], config["redirect"]["port"], wsgi_app, handler_class=WSGIRequestHandler
    )
    if config["redirect"]["method"] == "https":
        http_server.socket = ssl_context().wrap_socket(http_server.socket, server_side=True)

    if no_browser:
        print("Please navigate to this url: " + auth_url)
    else:
        webbrowser.open(auth_url, new=2, autoraise=True)

    http_server.handle_request()

    auth_response = wsgi_app.last_request_uri
    http_server.server_close()
    parsed_auth_response = parse_qs(auth_response)

    code_key = (
        "http://"
        + config["redirect"]["host"]
        + ":"
        + str(config["redirect"]["port"])
        + "/"
        + "?code"
    )
    if code_key not in parsed_auth_response:
        return

    auth_code = parsed_auth_response[code_key]
    result = build_msal_app(config, cache).acquire_token_by_authorization_code(
        auth_code,
        scopes=config['scopes'],
        redirect_uri=config["redirect_uri"]
    )

    if result.get("access_token") is None:
        print(f"Something went wrong during authorization: {result}")
        return

    app = {
        'config': config,
        'cache': cache,
        'crypt': crypt
    }
    return app, result["access_token"]

def fetch_token_from_cache(app):
    config = app['config']
    cache = app['cache']
    cca = build_msal_app(config, cache)
    accounts = cca.get_accounts()
    if cca.get_accounts:
        result = cca.acquire_token_silent(config['scopes'], account=accounts[0])
        return result["access_token"]

def build_app_state_from_credentials(crypt):
    # If the file is missing return None
    if not os.path.exists(credentials_file):
        return None

    credentials = open(credentials_file, "r").read()
    if crypt:
        gpg = crypt["gpg"]
        credentials = str(gpg.decrypt(credentials))

    # Make sure it is a valid json object
    try:
        config = json.loads(credentials)
    except:
        print("Not a valid json file or it is ecrypted. Maybe add/remove the -e arugment?")
        sys.exit(1)

    # We don't have a token cache?
    if config.get("token_cache") is None:
        return None

    app_state = {}
    cache = msal.SerializableTokenCache()
    cache.deserialize(config["token_cache"])
    app_state["config"] = config
    app_state["cache"] = cache
    app_state["crypt"] = crypt
    return app_state

# Encode the xoauth 2 message based on:
# https://docs.microsoft.com/en-us/exchange/client-developer/legacy-protocols/how-to-authenticate-an-imap-pop-smtp-application-by-using-oauth#sasl-xoauth2
def encode_xoauth2(app, token):
    config = app['config']
    cache = app['cache']
    cca = build_msal_app(config, cache)
    accounts = cca.get_accounts()
    username = accounts[0]["username"]
    C_A = b'\x01'
    user = ("user=" + username).encode("ascii")
    btoken = ("auth=Bearer " + token).encode("ascii")
    xoauth2_bytes = user + C_A + btoken + C_A + C_A
    return base64.b64encode(xoauth2_bytes).decode("utf-8")

def main(*args):
    args = parser.parse_args(args or None)

    crypt = None
    if args.encrypt_using_fingerprint:
        gpg_args = {"gnupghome": args.gpg_home} if args.gpg_home else {}
        gpg = gnupg.GPG(**gpg_args)
        crypt = {"gpg" : gpg, "fingerprint": args.encrypt_using_fingerprint}

    token = None
    app_state = build_app_state_from_credentials(crypt)
    if app_state is None:
        if success := build_new_app_state(crypt, args.no_browser):
            app_state, token = success

    if app_state is None:
        print("Something went wrong!")
        sys.exit(1)

    if token is None:
        token = fetch_token_from_cache(app_state)

    if token is not None:
        if args.encode_xoauth2:
            print(encode_xoauth2(app_state, token))
        else:
            print(token);

    cache = app_state['cache']
    if cache.has_state_changed:
        config = app_state["config"]
        config["token_cache"] = cache.serialize()
        config_json = json.dumps(config)
        crypt = app_state.get("crypt")
        if crypt:
            gpg = crypt["gpg"]
            fingerprint = crypt["fingerprint"]
            config_json = str(gpg.encrypt(config_json, fingerprint))
            open(credentials_file, "w").write(config_json)


if __name__ == "__main__":
    main()
